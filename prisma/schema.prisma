// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum AccountType {
    PREMIUM
    COMMON
}

model Player {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime?               @default(now()) @map("created_at")
  tgId                  String                  @map("tg_id") @unique
  isPremium             Boolean                 @map("is_premium")
  username              String                  @map("user_name")

  active                Boolean                 @default(true) @map("active")
  incomePerHour         Float                   @default(0) @map("income_per_hour")

  imageUrl              String?                 @map("image_url")

  firstName             String                  @map("first_name")
  lastName              String                  @map("last_name")

  balance               Float                   @default(0)  

  energyLatest           Float                   @default(300) @map("honey_latest")
  energyMax              Float                   @default(300) @map("honey_max")
  // Скорость восстановления энергии в единицах/секундах
  recoveryRate          Float                   @default(5) @map("recovery_rate")
  // Время последнего обновления энергии
  lastEnergyUpdate      DateTime                @default(now()) @map("last_energy_update")

  lastLogin             DateTime?               @map("last_login")
  lastLogout            DateTime?               @map("last_logout")

  levelId               Int                     @default(1) @map("level_id")
  referralProfit        Float?                  @default(0) @map("referral_profit")
  rankId                Int                     @default(1) @map("rank_id")

  token                 PlayerTokens?

  invitedById    String?  @db.ObjectId
  invitedBy      Player?  @relation("UserInvitations", fields: [invitedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
 
  referrals      Player[] @relation("UserInvitations")

  referralCount  Int       @default(0) @ignore
}


model PlayerTokens {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    accessToken  String?
    refreshToken String    
    createdAt    DateTime? @default(now()) @map("created_at")
    updatedAt    DateTime? @updatedAt @map("updated_at")
    player       Player    @relation(fields: [playerId], references: [id])
    playerId     String    @db.ObjectId @unique

    @@map("player_tokens")
}

