// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  name          String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum AccountType {
  PREMIUM
  COMMON
}

enum RankType {
  SHEETER 
  INSTALLER
  DEALER
  MANUFACTURER
}

model Player {
  id                    String                  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime?               @default(now()) @map("created_at")
  tgId                  String                  @map("tg_id") @unique
  isPremium             Boolean                 @map("is_premium")
  username              String                  @map("user_name")

  active                Boolean                 @default(true) @map("active")
  incomePerHour         Float                   @default(0) @map("income_per_hour")

  imageUrl              String?                 @map("image_url")

  firstName             String                  @map("first_name")
  lastName              String                  @map("last_name")

  balance               Float                   @default(0)  

  energyLatest           Float                   @default(300) @map("energy_latest")
  energyMax              Float                   @default(300) @map("energy_max")
  // Скорость восстановления энергии в единицах/секундах
  recoveryRate          Float                   @default(1) @map("recovery_rate")
  // Время последнего обновления энергии
  lastEnergyUpdate      DateTime                @default(now()) @map("last_energy_update")

  lastLogin             DateTime?               @map("last_login")
  lastLogout            DateTime?               @map("last_logout")

  levelId               Int                     @default(1) @map("level_id")
  referralProfit        Float?                  @default(0) @map("referral_profit")

  token                 PlayerTokens?

  invitedById           String?                 @db.ObjectId
  invitedBy             Player?                 @relation("UserInvitations", fields: [invitedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
 
  referrals             Player[]                @relation("UserInvitations")

   // One-to-One relation with DailyQuest
  dailyQuest            DailyQuest?   

  rank                  RankType                @default(SHEETER)
  items                 ItemOnPlayer[]          
  referralCount  Int       @default(0) @ignore

  @@map("player")
}


model PlayerTokens {
    id           String    @id @default(auto()) @map("_id") @db.ObjectId
    accessToken  String?
    refreshToken String?    
    createdAt    DateTime? @default(now()) @map("created_at")
    updatedAt    DateTime? @updatedAt @map("updated_at")
    player       Player    @relation(fields: [playerId], references: [id])
    playerId     String    @db.ObjectId @unique

    @@map("player_tokens")
}

model DailyQuest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId        String   @unique @map("player_id") @db.ObjectId
  player          Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  dailyQuestStreak Int     @default(0)    @map("daily_quest_streak") // Сколько дней подряд забирает награду
  lastDailyClaim   DateTime?              @map("last_daily_claim")    // Дата последнего забора награды
  dailyBaseReward  Float   @default(100)  @map("daily_base_reward")   // Базовая награда
  dailyMaxBonus    Float   @default(200)  @map("daily_max_bonus")     // Максимальный бонус
  dailyMaxStreak   Int     @default(14)   @map("daily_max_streak")    // Максимальный стрик для получения бонуса

   @@map("daily_quest")
}
  

model Item {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  price        Int
  income       Int        // Пассивный доход, который дает предмет раз в час
  categoryId   String     @db.ObjectId
  category     Category   @relation(fields: [categoryId], references: [id])
  dependencies ItemDependency[]
  rank         RankType       // Ранг, для которого доступен товар
  itemOnPlayers ItemOnPlayer[] 
}

model ItemDependency {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  item     Item     @relation(fields: [itemId], references: [id])
  itemId   String   @db.ObjectId
  @@map("item_dependency")
}


model ItemOnPlayer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  playerId  String   @db.ObjectId
  itemId    String   @db.ObjectId
  player    Player   @relation(fields: [playerId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
  @@map("item_on_player")
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  items Item[]
}


